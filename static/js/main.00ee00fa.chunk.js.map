{"version":3,"sources":["Pokemon.js","App.js","serviceWorker.js","index.js"],"names":["Pokemon","pokemonId","this","props","className","src","id","alt","name","type","attack","defense","HP","SP_Attack","SP_Defense","Speed","Weight","totalMoves","React","Component","App","componentDidMount","getPokemons","fetch","state","limit","then","res","json","data","promises","results","map","item","url","Promise","all","pokemonDetails","setState","pokemons","buttonsColor","a","document","getElementsByClassName","i","length","b","value","style","backgroundColor","positionCard","getElementById","paddingTop","loadMoreBtn","addLimit","prevState","prevProps","pokemon","key","onClick","types","stats","base_stat","weight","moves","posib","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.00ee00fa.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Pokemon.css';\r\n\r\n\r\n\r\nclass Pokemon extends React.Component {\r\n\r\n\r\nrender (){\r\n    const { pokemonId } = this.props;    \r\n\r\n    \r\n    return (\r\n    \r\n    <div  className=\"individualCard \">\r\n        \r\n        <img src={`img/${pokemonId.id}.jpg`} alt={pokemonId.name} />\r\n        \r\n        <p>{pokemonId.name}    #00{pokemonId.id}</p>\r\n        \r\n      <table>\r\n    <thead>\r\n      <tr>\r\n        <th>Type</th>\r\n        <th  >{pokemonId.type}</th>\r\n        \r\n      </tr>\r\n    </thead>\r\n    <tbody>\r\n      <tr>\r\n        <td>Attack</td>\r\n        <td>{pokemonId.attack}</td>\r\n       \r\n      </tr>  \r\n        <tr>\r\n        <td>Defense</td>\r\n        <td>{pokemonId.defense}</td>\r\n       \r\n      </tr>      \r\n       \r\n        <tr>\r\n        <td>HP</td>\r\n        <td>{pokemonId.HP}</td>\r\n       \r\n      </tr>\r\n        <tr>\r\n        <td>SP Attack</td>\r\n        <td>{pokemonId.SP_Attack}</td>\r\n       \r\n      </tr>\r\n        <tr>\r\n        <td>SP Defense</td>\r\n        <td>{pokemonId.SP_Defense}</td>\r\n       \r\n      </tr>\r\n        <tr>\r\n        <td>Speed</td>\r\n        <td>{pokemonId.Speed}</td>\r\n       \r\n      </tr>\r\n        <tr>\r\n        <td>Weight</td>\r\n        <td>{pokemonId.Weight}</td>\r\n       \r\n      </tr>\r\n        <tr>\r\n        <td>totalMoves</td>\r\n        <td>{pokemonId.totalMoves}</td>\r\n       \r\n      </tr>\r\n        \r\n     \r\n      \r\n    </tbody>\r\n    </table>\r\n        \r\n     \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        \r\n        </div>\r\n    \r\n    \r\n    \r\n    \r\n    )\r\n    \r\n\r\n\r\n}\r\n}\r\nexport default Pokemon;","import React from 'react';\nimport './App.css';\nimport Pokemon from './Pokemon';\n\n\n\n\n\n\n\n\nclass App extends React.Component {\n    constructor (){\n        super();\n        this.state={\n            pokemons:[],\n            pokemonId:{\n                name:'Bulbasavr',\n                id:1,\n                type:'Poison',\n                attack:49,\n                defense:49,\n                HP:45,\n                SP_Attack:65,\n                SP_Defense:65,\n                Speed:45,\n                Weight:70,\n                totalMoves:76,\n            },\n        limit:12,\n            \n    \n        }\n    };\n    \n   \n    \n    \n   \n  \n componentDidMount=()=> {\n        \nthis.getPokemons();\n           \n };\n\ncomponentDidUpdate   (prevState, prevProps)  {\n        \n        if( prevState.limit!== this.state.limit ||  prevState.pokemonId!== this.state.pokemonId   ){\n              \n            this.getPokemons();\n            this.positionCard();\n            \n        }\n            \n    }\n    \n\ngetPokemons=()=>{\n    \n             \n  fetch(`https://pokeapi.co/api/v2/pokemon?limit=${this.state.limit}`)\n  .then(res => res.json())\n  .then(data => { \n   \n      \n      const promises = data.results.map((item) => fetch(item.url).then(res => res.json()));\n\n      Promise.all(promises).then(pokemonDetails => {\n        \n       this.setState({ pokemons: pokemonDetails })\n      })\n        \n        })\n    }    \n\n\nbuttonsColor=()=> {\n   let a= document.getElementsByClassName('ability');\n   for(let i=0; i< a.length; i++){\n       let b = a[i];\n       \n       if (b.value===\"poison\"){\n           b.style.backgroundColor = \"#991199\";          \n          \n       } \n       else if (b.value===\"grass\"){\n           b.style.backgroundColor = \"#03c03c\";          \n          \n       }\n       else if (b.value===\"fire\"){\n           b.style.backgroundColor = \"#dc143c\";          \n          \n       }\n       else if (b.value===\"water\"){\n           b.style.backgroundColor = \"#007fff\";          \n          \n       }\n       else if (b.value===\"flying\"){\n           b.style.backgroundColor = \"#ffff00\";          \n          \n       }\n       \n        else if (b.value===\"bug\"){\n           b.style.backgroundColor = \"#a86e36\";          \n          \n       }\n       else {\n           b.style.backgroundColor = \"#f4c430\"; \n       }\n       \n       \n       \n   }\n  \n};\n\npositionCard =()=> {\n    \n    let a = this.state.pokemonId.id;\n    if (  a > 6){\n        \n        document.getElementById('pokemonSingleCard').style.paddingTop=\"21%\";\n    }\n else if( a > 9 ){\n        \n        document.getElementById('pokemonSingleCard').style.paddingTop=\"50%\";\n    }\n}\n\n\n\nloadMoreBtn=()=> {\n    let addLimit = this.state.limit + 6;\n      this.setState({\n      limit: addLimit\n      })\n             \n    \n}\n\n\n\n \nrender (){\n    \n   \n\n this.buttonsColor();\n    \n           \n      return (\n           \n \n        \n         \n          <div>\n          \n          <h1 >Pokedex</h1>\n          \n          \n          <div className=\"wrapper a\">\n          \n          <div className=\" pokemonWrapper a\">\n          \n          {this.state.pokemons.map((pokemon)=>{\n          \n          \n          \n             return <div className=\"cardPokemon\" key={pokemon.id} onClick={()=>{\n                                     \n                                  this.setState ( {\n                                              pokemonId: {\n                                                  name:pokemon.name,           \n                                                  id: pokemon.id,\n                                                  type: pokemon.types[0].type.name,\n                                                  attack: pokemon.stats[4].base_stat,\n                                                  defense: pokemon.stats[3].base_stat,\n                                                  HP: pokemon.stats[5].base_stat,\n                                                  SP_Attack: pokemon.stats[2].base_stat,\n                                                  SP_Defense: pokemon.stats[1].base_stat,\n                                                  Speed: pokemon.stats[0].base_stat,\n                                                  Weight: pokemon.weight,\n                                                  totalMoves: pokemon.moves.length - 2,     \n                                                          }\n                                  } )   \n                                  \n                                  \n                                  \n                                  \n                                  \n\n      }} >\n                 \n                 <img src= { `img/${pokemon.id}.jpg` }  alt=\"\" />\n         \n                 \n                 <p >{pokemon.name}</p>\n\n                  <div className=\"types\">\n                  {pokemon.types.map(posib=>{\n                     return   <button className= \"ability\" value={posib.type.name} > {posib.type.name}</button> \n             \n                  })}\n                 \n                 </div>\n                 \n                 </div>\n \n          })}\n  \n     <button type=\"button\"  id=\"loadeMore\" onClick= {this.loadMoreBtn} > LOAD MORE</button>\n          \n          </div> \n            <div id=\"pokemonSingleCard\" > \n                \n                <Pokemon  pokemonId={this.state.pokemonId} />\n                \n                \n                \n                </div>\n                 \n\n          \n          \n          \n          \n          \n          \n          \n          \n           </div>\n</div>\n          \n          \n\n      \n\n      \n      \n      \n      )  \n\n\n    \n\n}\n\n\n\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}